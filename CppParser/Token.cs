using System;
namespace CppParser
{
    public class Token
    {
        private System.Collections.Generic.Dictionary<int, string> token_name = new System.Collections.Generic.Dictionary<int, string>()
        {
            [(int)TokenNum.IDENTICAL] = "IDENTICAL",
            [(int)TokenNum.BOOLEAN_AND] = "BOOLEAN_AND",
            [(int)TokenNum.GREATER_EQUAL] = "GREATER_EQUAL",
            [(int)TokenNum.MINUS_MINUS] = "MINUS_MINUS",
            [(int)TokenNum.PLUS_EQUAL] = "PLUS_EQUAL",
            [(int)TokenNum.RSHIFT_LOGICAL_EQUAL] = "RSHIFT_LOGICAL_EQUAL",
            [(int)TokenNum.MINUS_EQUAL] = "MINUS_EQUAL",
            [(int)TokenNum.BOOLEAN_OR] = "BOOLEAN_OR",
            [(int)TokenNum.ELIPSIS] = "ELIPSIS",
            [(int)TokenNum.LAMBDA] = "LAMBDA",
            [(int)TokenNum.NULL_COALESCE] = "NULL_COALESCE",
            [(int)TokenNum.TOKEN_PASTE] = "TOKEN_PASTE",
            [(int)TokenNum.PLUS_PLUS] = "PLUS_PLUS",
            [(int)TokenNum.MOD_EQUAL] = "MOD_EQUAL",
            [(int)TokenNum.STRING_LITERAL] = "STRING_LITERAL",
            [(int)TokenNum.LESS_EQUAL] = "LESS_EQUAL",
            [(int)TokenNum.EQUAL] = "EQUAL",
            [(int)TokenNum.RAISE] = "RAISE",
            [(int)TokenNum.DIV_FLOOR] = "DIV_FLOOR",
            [(int)TokenNum.DIV_FLOOR_EQUAL] = "DIV_FLOOR_EQUAL",
            [(int)TokenNum.LINE_COMMENT] = "LINE_COMMENT",
            [(int)TokenNum.JAVADOC_COMMENT] = "JAVADOC_COMMENT",
            [(int)TokenNum.TIMES_EQUAL] = "TIMES_EQUAL",
            [(int)TokenNum.MEMBER_FROM_OBJECT_PTR] = "MEMBER_FROM_OBJECT_PTR",
            [(int)TokenNum.RAISE_EQUAL] = "RAISE_EQUAL",
            [(int)TokenNum.AT_EQUAL] = "AT_EQUAL",
            [(int)TokenNum.ARROW] = "ARROW",
            [(int)TokenNum.HERE_DOCUMENT] = "HERE_DOCUMENT",
            [(int)TokenNum.RSHIFT_ARITHMETIC_EQUAL] = "RSHIFT_ARITHMETIC_EQUAL",
            [(int)TokenNum.DOC_COMMENT] = "DOC_COMMENT",
            [(int)TokenNum.CHAR_LITERAL] = "CHAR_LITERAL",
            [(int)TokenNum.LSHIFT_EQUAL] = "LSHIFT_EQUAL",
            [(int)TokenNum.XOR_EQUAL] = "XOR_EQUAL",
            [(int)TokenNum.SPACESHIP] = "SPACESHIP",
            [(int)TokenNum.NOT_EQUAL] = "NOT_EQUAL",
            [(int)TokenNum.MEMBER_PTR_FROM_OBJECT] = "MEMBER_PTR_FROM_OBJECT",
            [(int)TokenNum.OR_EQUAL] = "OR_EQUAL",
            [(int)TokenNum.LSHIFT] = "LSHIFT",
            [(int)TokenNum.RSHIFT_EQUAL] = "RSHIFT_EQUAL",
            [(int)TokenNum.RSHIFT] = "RSHIFT",
            [(int)TokenNum.BLOCK_COMMENT] = "BLOCK_COMMENT",
            [(int)TokenNum.CONCAT_EQUALS] = "CONCAT_EQUALS",
            [(int)TokenNum.MEMBER_PTR] = "MEMBER_PTR",
            [(int)TokenNum.MEMBER_PTR_FROM_OBJECT_PTR] = "MEMBER_PTR_FROM_OBJECT_PTR",
            [(int)TokenNum.SCOPE] = "SCOPE",
            [(int)TokenNum.RSHIFT_LOGICAL] = "RSHIFT_LOGICAL",
            [(int)TokenNum.AND_EQUAL] = "AND_EQUAL",
            [(int)TokenNum.DIV_EQUAL] = "DIV_EQUAL",
            [(int)TokenNum.NOT_IDENTICAL] = "NOT_IDENTICAL",
            [(int)TokenNum.NULL_CONDITIONAL] = "NULL_CONDITIONAL",
            [(int)TokenNum.RSHIFT_ARITHMETIC] = "RSHIFT_ARITHMETIC",
        };

        private System.Collections.Generic.Dictionary<int, string> token_symbol = new System.Collections.Generic.Dictionary<int, string>()
        {
            [(int)TokenNum.BOOLEAN_OR] = "||",
            [(int)TokenNum.ARROW] = "->",
            [(int)TokenNum.RSHIFT_EQUAL] = ">>=",
            [(int)TokenNum.MEMBER_FROM_OBJECT_PTR] = "->",
            [(int)TokenNum.RSHIFT_ARITHMETIC] = ">>",
            [(int)TokenNum.TOKEN_PASTE] = "##",
            [(int)TokenNum.BOOLEAN_AND] = "&&",
            [(int)TokenNum.LINE_COMMENT] = "//...",
            [(int)TokenNum.LSHIFT_EQUAL] = "<<=",
            [(int)TokenNum.MINUS_EQUAL] = "-=",
            [(int)TokenNum.DIV_FLOOR] = "//",
            [(int)TokenNum.JAVADOC_COMMENT] = "/**...*/",
            [(int)TokenNum.CHAR_LITERAL] = "'.'",
            [(int)TokenNum.PLUS_EQUAL] = "+=",
            [(int)TokenNum.MEMBER_PTR] = "->",
            [(int)TokenNum.BLOCK_COMMENT] = "/*...*/",
            [(int)TokenNum.SCOPE] = "::",
            [(int)TokenNum.CONCAT_EQUALS] = ".=",
            [(int)TokenNum.MEMBER_PTR_FROM_OBJECT_PTR] = "->*",
            [(int)TokenNum.RAISE_EQUAL] = "**=",
            [(int)TokenNum.SPACESHIP] = "<=>",
            [(int)TokenNum.OR_EQUAL] = "|=",
            [(int)TokenNum.LAMBDA] = "=>",
            [(int)TokenNum.RSHIFT_LOGICAL] = ">>>",
            [(int)TokenNum.DIV_EQUAL] = "/=",
            [(int)TokenNum.PLUS_PLUS] = "++",
            [(int)TokenNum.MOD_EQUAL] = "%=",
            [(int)TokenNum.IDENTICAL] = "===",
            [(int)TokenNum.RAISE] = "**",
            [(int)TokenNum.MINUS_MINUS] = "--",
            [(int)TokenNum.MEMBER_PTR_FROM_OBJECT] = ".*",
            [(int)TokenNum.NOT_IDENTICAL] = "!==",
            [(int)TokenNum.RSHIFT_LOGICAL_EQUAL] = ">>>=",
            [(int)TokenNum.NOT_EQUAL] = "!=",
            [(int)TokenNum.ELIPSIS] = "...",
            [(int)TokenNum.AND_EQUAL] = "&=",
            [(int)TokenNum.TIMES_EQUAL] = "*=",
            [(int)TokenNum.STRING_LITERAL] = "\"...\"",
            [(int)TokenNum.LESS_EQUAL] = "<=",
            [(int)TokenNum.HERE_DOCUMENT] = "<<<...",
            [(int)TokenNum.RSHIFT] = ">>",
            [(int)TokenNum.RSHIFT_ARITHMETIC_EQUAL] = ">>=",
            [(int)TokenNum.DIV_FLOOR_EQUAL] = "//=",
            [(int)TokenNum.EQUAL] = "==",
            [(int)TokenNum.AT_EQUAL] = "@=",
            [(int)TokenNum.LSHIFT] = "<<",
            [(int)TokenNum.XOR_EQUAL] = "^=",
            [(int)TokenNum.DOC_COMMENT] = "///",
            [(int)TokenNum.GREATER_EQUAL] = ">=",
            [(int)TokenNum.NULL_COALESCE] = "??",
            [(int)TokenNum.NULL_CONDITIONAL] = "?.",
        };

        public enum TokenNum
        {
            FIRST = TokenId.OTHER_TOKEN,
            AND_EQUAL,
            ARROW,
            AT_EQUAL,
            BLOCK_COMMENT,
            BOOLEAN_AND,
            BOOLEAN_OR,
            CHAR_LITERAL,
            CONCAT_EQUALS,
            DIV_EQUAL,
            DIV_FLOOR,
            DIV_FLOOR_EQUAL,
            DOC_COMMENT,
            ELIPSIS,
            EQUAL,
            GREATER_EQUAL,
            HERE_DOCUMENT,
            IDENTICAL,
            JAVADOC_COMMENT,
            LAMBDA,
            LESS_EQUAL,
            LINE_COMMENT,
            LSHIFT,
            LSHIFT_EQUAL,
            MEMBER_FROM_OBJECT_PTR,
            MEMBER_PTR,
            MEMBER_PTR_FROM_OBJECT,
            MEMBER_PTR_FROM_OBJECT_PTR,
            MINUS_EQUAL,
            MINUS_MINUS,
            MOD_EQUAL,
            NOT_EQUAL,
            NOT_IDENTICAL,
            NULL_COALESCE,
            NULL_CONDITIONAL,
            OR_EQUAL,
            PLUS_EQUAL,
            PLUS_PLUS,
            RAISE,
            RAISE_EQUAL,
            RSHIFT,
            RSHIFT_ARITHMETIC,
            RSHIFT_ARITHMETIC_EQUAL,
            RSHIFT_EQUAL,
            RSHIFT_LOGICAL,
            RSHIFT_LOGICAL_EQUAL,
            SCOPE,
            SPACESHIP,
            STRING_LITERAL,
            TIMES_EQUAL,
            TOKEN_PASTE,
            XOR_EQUAL,
        }

        public string to_string(int k)
        {
            if (token_name.ContainsKey(k))
            {
                return token_name[k];
            }
            return "???";
        }

        public string to_symbol(int k)
        {
            if (token_symbol.ContainsKey(k))
            {
                return token_symbol[k];
            }
            return "???";
        }
    }
}
