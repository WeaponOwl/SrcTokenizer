using System;
namespace CppParser
{
    public class Keyword
    {
        public enum IdentifierType
        {
            FIRST = TokenId.KEYWORD,
            IDENTIFIER, // Plain identifier (not a keyword)
            K_False,
            K_None,
            K_True,
            K_abstract,
            K_alignas,
            K_alignof,
            K_and,
            K_and_eq,
            K_array,
            K_as,
            K_asm,
            K_assert,
            K_async,
            K_atomic_cancel,
            K_atomic_commit,
            K_atomic_noexcept,
            K_auto,
            K_await,
            K_base,
            K_bitand,
            K_bitor,
            K_bool,
            K_boolean,
            K_break,
            K_byte,
            K_callable,
            K_case,
            K_catch,
            K_char,
            K_char16_t,
            K_char32_t,
            K_checked,
            K_class,
            K_clone,
            K_co_await,
            K_co_return,
            K_co_yield,
            K_compl,
            K_concept,
            K_const,
            K_const_cast,
            K_constexpr,
            K_continue,
            K_decimal,
            K_declare,
            K_decltype,
            K_def,
            K_default,
            K_define,
            K_del,
            K_delegate,
            K_delete,
            K_die,
            K_do,
            K_double,
            K_dynamic_cast,
            K_echo,
            K_elif,
            K_else,
            K_elseif,
            K_empty,
            K_enddeclare,
            K_endfor,
            K_endforeach,
            K_endif,
            K_endregion,
            K_endswitch,
            K_endwhile,
            K_enum,
            K_error,
            K_eval,
            K_event,
            K_except,
            K_exit,
            K_explicit,
            K_export,
            K_extends,
            K_extern,
            K_false,
            K_final,
            K_finally,
            K_fixed,
            K_float,
            K_for,
            K_foreach,
            K_friend,
            K_from,
            K_function,
            K_global,
            K_goto,
            K_if,
            K_ifdef,
            K_ifndef,
            K_implements,
            K_implicit,
            K_import,
            K_in,
            K_include,
            K_include_once,
            K_inline,
            K_instanceof,
            K_insteadof,
            K_int,
            K_interface,
            K_internal,
            K_is,
            K_isset,
            K_lambda,
            K_line,
            K_list,
            K_lock,
            K_long,
            K_module,
            K_mutable,
            K_namespace,
            K_native,
            K_new,
            K_noalias,
            K_noexcept,
            K_nonlocal,
            K_not,
            K_not_eq,
            K_null,
            K_nullptr,
            K_object,
            K_operator,
            K_or,
            K_or_eq,
            K_out,
            K_override,
            K_package,
            K_params,
            K_pass,
            K_pragma,
            K_print,
            K_private,
            K_protected,
            K_public,
            K_raise,
            K_readonly,
            K_ref,
            K_region,
            K_register,
            K_reinterpret_cast,
            K_require,
            K_require_once,
            K_requires,
            K_restrict,
            K_return,
            K_sbyte,
            K_sealed,
            K_short,
            K_signed,
            K_sizeof,
            K_stackalloc,
            K_static,
            K_static_assert,
            K_static_cast,
            K_strictfp,
            K_string,
            K_struct,
            K_super,
            K_switch,
            K_synchronized,
            K_template,
            K_this,
            K_thread_local,
            K_throw,
            K_throws,
            K_trait,
            K_transient,
            K_true,
            K_try,
            K_typedef,
            K_typeid,
            K_typename,
            K_typeof,
            K_uint,
            K_ulong,
            K_unchecked,
            K_undef,
            K_union,
            K_unsafe,
            K_unset,
            K_unsigned,
            K_use,
            K_ushort,
            K_using,
            K_var,
            K_virtual,
            K_void,
            K_volatile,
            K_warning,
            K_wchar_t,
            K_while,
            K_with,
            K_xor,
            K_xor_eq,
            K_yield,

            LAST,       // Last value (295)
        };

        private System.Collections.Generic.Dictionary<string, IdentifierType> km = new System.Collections.Generic.Dictionary<string, IdentifierType>()
        {
            ["for"] = IdentifierType.K_for,
            ["do"] = IdentifierType.K_do,
            ["public"] = IdentifierType.K_public,
            ["pass"] = IdentifierType.K_pass,
            ["list"] = IdentifierType.K_list,
            ["switch"] = IdentifierType.K_switch,
            ["compl"] = IdentifierType.K_compl,
            ["co_return"] = IdentifierType.K_co_return,
            ["finally"] = IdentifierType.K_finally,
            ["char"] = IdentifierType.K_char,
            ["constexpr"] = IdentifierType.K_constexpr,
            ["using"] = IdentifierType.K_using,
            ["elif"] = IdentifierType.K_elif,
            ["nonlocal"] = IdentifierType.K_nonlocal,
            ["require_once"] = IdentifierType.K_require_once,
            ["export"] = IdentifierType.K_export,
            ["float"] = IdentifierType.K_float,
            ["template"] = IdentifierType.K_template,
            ["xor"] = IdentifierType.K_xor,
            ["static"] = IdentifierType.K_static,
            ["typeof"] = IdentifierType.K_typeof,
            ["void"] = IdentifierType.K_void,
            ["default"] = IdentifierType.K_default,
            ["except"] = IdentifierType.K_except,
            ["die"] = IdentifierType.K_die,
            ["as"] = IdentifierType.K_as,
            ["use"] = IdentifierType.K_use,
            ["typedef"] = IdentifierType.K_typedef,
            ["reinterpret_cast"] = IdentifierType.K_reinterpret_cast,
            ["noexcept"] = IdentifierType.K_noexcept,
            ["catch"] = IdentifierType.K_catch,
            ["pragma"] = IdentifierType.K_pragma,
            ["await"] = IdentifierType.K_await,
            ["clone"] = IdentifierType.K_clone,
            ["elseif"] = IdentifierType.K_elseif,
            ["decimal"] = IdentifierType.K_decimal,
            ["mutable"] = IdentifierType.K_mutable,
            ["and_eq"] = IdentifierType.K_and_eq,
            ["bool"] = IdentifierType.K_bool,
            ["throws"] = IdentifierType.K_throws,
            ["unset"] = IdentifierType.K_unset,
            ["raise"] = IdentifierType.K_raise,
            ["sizeof"] = IdentifierType.K_sizeof,
            ["true"] = IdentifierType.K_true,
            ["boolean"] = IdentifierType.K_boolean,
            ["ifdef"] = IdentifierType.K_ifdef,
            ["require"] = IdentifierType.K_require,
            ["callable"] = IdentifierType.K_callable,
            ["string"] = IdentifierType.K_string,
            ["event"] = IdentifierType.K_event,
            ["requires"] = IdentifierType.K_requires,
            ["include"] = IdentifierType.K_include,
            ["declare"] = IdentifierType.K_declare,
            ["enum"] = IdentifierType.K_enum,
            ["isset"] = IdentifierType.K_isset,
            ["unchecked"] = IdentifierType.K_unchecked,
            ["lock"] = IdentifierType.K_lock,
            ["sealed"] = IdentifierType.K_sealed,
            ["case"] = IdentifierType.K_case,
            ["union"] = IdentifierType.K_union,
            ["implements"] = IdentifierType.K_implements,
            ["alignof"] = IdentifierType.K_alignof,
            ["byte"] = IdentifierType.K_byte,
            ["delete"] = IdentifierType.K_delete,
            ["class"] = IdentifierType.K_class,
            ["package"] = IdentifierType.K_package,
            ["decltype"] = IdentifierType.K_decltype,
            ["if"] = IdentifierType.K_if,
            ["override"] = IdentifierType.K_override,
            ["bitor"] = IdentifierType.K_bitor,
            ["strictfp"] = IdentifierType.K_strictfp,
            ["out"] = IdentifierType.K_out,
            ["unsafe"] = IdentifierType.K_unsafe,
            ["endregion"] = IdentifierType.K_endregion,
            ["yield"] = IdentifierType.K_yield,
            ["inline"] = IdentifierType.K_inline,
            ["virtual"] = IdentifierType.K_virtual,
            ["co_await"] = IdentifierType.K_co_await,
            ["synchronized"] = IdentifierType.K_synchronized,
            ["and"] = IdentifierType.K_and,
            ["int"] = IdentifierType.K_int,
            ["thread_local"] = IdentifierType.K_thread_local,
            ["def"] = IdentifierType.K_def,
            ["endwhile"] = IdentifierType.K_endwhile,
            ["fixed"] = IdentifierType.K_fixed,
            ["endfor"] = IdentifierType.K_endfor,
            ["True"] = IdentifierType.K_True,
            ["async"] = IdentifierType.K_async,
            ["abstract"] = IdentifierType.K_abstract,
            ["print"] = IdentifierType.K_print,
            ["try"] = IdentifierType.K_try,
            ["transient"] = IdentifierType.K_transient,
            ["const_cast"] = IdentifierType.K_const_cast,
            ["enddeclare"] = IdentifierType.K_enddeclare,
            ["explicit"] = IdentifierType.K_explicit,
            ["noalias"] = IdentifierType.K_noalias,
            ["throw"] = IdentifierType.K_throw,
            ["final"] = IdentifierType.K_final,
            ["function"] = IdentifierType.K_function,
            ["goto"] = IdentifierType.K_goto,
            ["static_assert"] = IdentifierType.K_static_assert,
            ["sbyte"] = IdentifierType.K_sbyte,
            ["instanceof"] = IdentifierType.K_instanceof,
            ["undef"] = IdentifierType.K_undef,
            ["operator"] = IdentifierType.K_operator,
            ["not"] = IdentifierType.K_not,
            ["char16_t"] = IdentifierType.K_char16_t,
            ["endif"] = IdentifierType.K_endif,
            ["atomic_noexcept"] = IdentifierType.K_atomic_noexcept,
            ["object"] = IdentifierType.K_object,
            ["asm"] = IdentifierType.K_asm,
            ["uint"] = IdentifierType.K_uint,
            ["stackalloc"] = IdentifierType.K_stackalloc,
            ["extends"] = IdentifierType.K_extends,
            ["unsigned"] = IdentifierType.K_unsigned,
            ["restrict"] = IdentifierType.K_restrict,
            ["while"] = IdentifierType.K_while,
            ["empty"] = IdentifierType.K_empty,
            ["or_eq"] = IdentifierType.K_or_eq,
            ["ushort"] = IdentifierType.K_ushort,
            ["friend"] = IdentifierType.K_friend,
            ["namespace"] = IdentifierType.K_namespace,
            ["signed"] = IdentifierType.K_signed,
            ["auto"] = IdentifierType.K_auto,
            ["or"] = IdentifierType.K_or,
            ["dynamic_cast"] = IdentifierType.K_dynamic_cast,
            ["else"] = IdentifierType.K_else,
            ["interface"] = IdentifierType.K_interface,
            ["insteadof"] = IdentifierType.K_insteadof,
            ["ulong"] = IdentifierType.K_ulong,
            ["foreach"] = IdentifierType.K_foreach,
            ["null"] = IdentifierType.K_null,
            ["eval"] = IdentifierType.K_eval,
            ["lambda"] = IdentifierType.K_lambda,
            ["params"] = IdentifierType.K_params,
            ["break"] = IdentifierType.K_break,
            ["atomic_commit"] = IdentifierType.K_atomic_commit,
            ["in"] = IdentifierType.K_in,
            ["static_cast"] = IdentifierType.K_static_cast,
            ["volatile"] = IdentifierType.K_volatile,
            ["trait"] = IdentifierType.K_trait,
            ["endforeach"] = IdentifierType.K_endforeach,
            ["base"] = IdentifierType.K_base,
            ["bitand"] = IdentifierType.K_bitand,
            ["ref"] = IdentifierType.K_ref,
            ["alignas"] = IdentifierType.K_alignas,
            ["struct"] = IdentifierType.K_struct,
            ["new"] = IdentifierType.K_new,
            ["native"] = IdentifierType.K_native,
            ["exit"] = IdentifierType.K_exit,
            ["short"] = IdentifierType.K_short,
            ["var"] = IdentifierType.K_var,
            ["False"] = IdentifierType.K_False,
            ["delegate"] = IdentifierType.K_delegate,
            ["import"] = IdentifierType.K_import,
            ["co_yield"] = IdentifierType.K_co_yield,
            ["region"] = IdentifierType.K_region,
            ["implicit"] = IdentifierType.K_implicit,
            ["warning"] = IdentifierType.K_warning,
            ["internal"] = IdentifierType.K_internal,
            ["const"] = IdentifierType.K_const,
            ["include_once"] = IdentifierType.K_include_once,
            ["ifndef"] = IdentifierType.K_ifndef,
            ["global"] = IdentifierType.K_global,
            ["endswitch"] = IdentifierType.K_endswitch,
            ["array"] = IdentifierType.K_array,
            ["false"] = IdentifierType.K_false,
            ["extern"] = IdentifierType.K_extern,
            ["error"] = IdentifierType.K_error,
            ["typename"] = IdentifierType.K_typename,
            ["wchar_t"] = IdentifierType.K_wchar_t,
            ["private"] = IdentifierType.K_private,
            ["assert"] = IdentifierType.K_assert,
            ["protected"] = IdentifierType.K_protected,
            ["long"] = IdentifierType.K_long,
            ["line"] = IdentifierType.K_line,
            ["concept"] = IdentifierType.K_concept,
            ["checked"] = IdentifierType.K_checked,
            ["return"] = IdentifierType.K_return,
            ["module"] = IdentifierType.K_module,
            ["del"] = IdentifierType.K_del,
            ["double"] = IdentifierType.K_double,
            ["echo"] = IdentifierType.K_echo,
            ["with"] = IdentifierType.K_with,
            ["super"] = IdentifierType.K_super,
            ["readonly"] = IdentifierType.K_readonly,
            ["this"] = IdentifierType.K_this,
            ["xor_eq"] = IdentifierType.K_xor_eq,
            ["register"] = IdentifierType.K_register,
            ["not_eq"] = IdentifierType.K_not_eq,
            ["from"] = IdentifierType.K_from,
            ["atomic_cancel"] = IdentifierType.K_atomic_cancel,
            ["char32_t"] = IdentifierType.K_char32_t,
            ["is"] = IdentifierType.K_is,
            ["define"] = IdentifierType.K_define,
            ["typeid"] = IdentifierType.K_typeid,
            ["continue"] = IdentifierType.K_continue,
            ["None"] = IdentifierType.K_None,
            ["nullptr"] = IdentifierType.K_nullptr,
        };
        private System.Collections.Generic.Dictionary<int, string> tm = new System.Collections.Generic.Dictionary<int, string>()
        {
            [(int)IdentifierType.K_in] = "in",
            [(int)IdentifierType.K_die] = "die",
            [(int)IdentifierType.K_ifndef] = "ifndef",
            [(int)IdentifierType.K_bitor] = "bitor",
            [(int)IdentifierType.K_thread_local] = "thread_local",
            [(int)IdentifierType.K_undef] = "undef",
            [(int)IdentifierType.K_co_yield] = "co_yield",
            [(int)IdentifierType.K_endregion] = "endregion",
            [(int)IdentifierType.K_eval] = "eval",
            [(int)IdentifierType.K_struct] = "struct",
            [(int)IdentifierType.K_define] = "define",
            [(int)IdentifierType.K_from] = "from",
            [(int)IdentifierType.K_elseif] = "elseif",
            [(int)IdentifierType.K_static] = "static",
            [(int)IdentifierType.K_as] = "as",
            [(int)IdentifierType.K_use] = "use",
            [(int)IdentifierType.K_region] = "region",
            [(int)IdentifierType.K_public] = "public",
            [(int)IdentifierType.K_atomic_cancel] = "atomic_cancel",
            [(int)IdentifierType.K_with] = "with",
            [(int)IdentifierType.K_xor] = "xor",
            [(int)IdentifierType.K_not_eq] = "not_eq",
            [(int)IdentifierType.K_true] = "true",
            [(int)IdentifierType.K_explicit] = "explicit",
            [(int)IdentifierType.K_unsigned] = "unsigned",
            [(int)IdentifierType.K_atomic_noexcept] = "atomic_noexcept",
            [(int)IdentifierType.K_global] = "global",
            [(int)IdentifierType.K_ref] = "ref",
            [(int)IdentifierType.K_implements] = "implements",
            [(int)IdentifierType.K_atomic_commit] = "atomic_commit",
            [(int)IdentifierType.K_endwhile] = "endwhile",
            [(int)IdentifierType.K_final] = "final",
            [(int)IdentifierType.K_or_eq] = "or_eq",
            [(int)IdentifierType.K_bitand] = "bitand",
            [(int)IdentifierType.K_clone] = "clone",
            [(int)IdentifierType.K_using] = "using",
            [(int)IdentifierType.K_if] = "if",
            [(int)IdentifierType.K_new] = "new",
            [(int)IdentifierType.K_string] = "string",
            [(int)IdentifierType.K_implicit] = "implicit",
            [(int)IdentifierType.K_array] = "array",
            [(int)IdentifierType.K_xor_eq] = "xor_eq",
            [(int)IdentifierType.K_int] = "int",
            [(int)IdentifierType.K_throw] = "throw",
            [(int)IdentifierType.K_module] = "module",
            [(int)IdentifierType.K_compl] = "compl",
            [(int)IdentifierType.K_warning] = "warning",
            [(int)IdentifierType.K_declare] = "declare",
            [(int)IdentifierType.K_params] = "params",
            [(int)IdentifierType.K_false] = "false",
            [(int)IdentifierType.K_sbyte] = "sbyte",
            [(int)IdentifierType.K_register] = "register",
            [(int)IdentifierType.K_not] = "not",
            [(int)IdentifierType.K_private] = "private",
            [(int)IdentifierType.K_finally] = "finally",
            [(int)IdentifierType.K_else] = "else",
            [(int)IdentifierType.K_or] = "or",
            [(int)IdentifierType.K_noexcept] = "noexcept",
            [(int)IdentifierType.K_True] = "True",
            [(int)IdentifierType.K_checked] = "checked",
            [(int)IdentifierType.K_typedef] = "typedef",
            [(int)IdentifierType.K_stackalloc] = "stackalloc",
            [(int)IdentifierType.K_char32_t] = "char32_t",
            [(int)IdentifierType.K_enddeclare] = "enddeclare",
            [(int)IdentifierType.K_goto] = "goto",
            [(int)IdentifierType.K_try] = "try",
            [(int)IdentifierType.K_auto] = "auto",
            [(int)IdentifierType.K_line] = "line",
            [(int)IdentifierType.K_const_cast] = "const_cast",
            [(int)IdentifierType.K_asm] = "asm",
            [(int)IdentifierType.K_callable] = "callable",
            [(int)IdentifierType.K_package] = "package",
            [(int)IdentifierType.K_elif] = "elif",
            [(int)IdentifierType.K_nullptr] = "nullptr",
            [(int)IdentifierType.K_endif] = "endif",
            [(int)IdentifierType.K_switch] = "switch",
            [(int)IdentifierType.K_abstract] = "abstract",
            [(int)IdentifierType.K_reinterpret_cast] = "reinterpret_cast",
            [(int)IdentifierType.K_export] = "export",
            [(int)IdentifierType.K_echo] = "echo",
            [(int)IdentifierType.K_char16_t] = "char16_t",
            [(int)IdentifierType.K_ulong] = "ulong",
            [(int)IdentifierType.K_await] = "await",
            [(int)IdentifierType.K_synchronized] = "synchronized",
            [(int)IdentifierType.K_readonly] = "readonly",
            [(int)IdentifierType.K_endfor] = "endfor",
            [(int)IdentifierType.K_endswitch] = "endswitch",
            [(int)IdentifierType.K_exit] = "exit",
            [(int)IdentifierType.K_unsafe] = "unsafe",
            [(int)IdentifierType.K_this] = "this",
            [(int)IdentifierType.K_virtual] = "virtual",
            [(int)IdentifierType.K_import] = "import",
            [(int)IdentifierType.K_union] = "union",
            [(int)IdentifierType.K_pragma] = "pragma",
            [(int)IdentifierType.K_function] = "function",
            [(int)IdentifierType.K_yield] = "yield",
            [(int)IdentifierType.K_co_return] = "co_return",
            [(int)IdentifierType.K_sizeof] = "sizeof",
            [(int)IdentifierType.K_return] = "return",
            [(int)IdentifierType.K_typename] = "typename",
            [(int)IdentifierType.K_event] = "event",
            [(int)IdentifierType.K_protected] = "protected",
            [(int)IdentifierType.K_is] = "is",
            [(int)IdentifierType.K_const] = "const",
            [(int)IdentifierType.K_inline] = "inline",
            [(int)IdentifierType.K_ifdef] = "ifdef",
            [(int)IdentifierType.K_del] = "del",
            [(int)IdentifierType.K_pass] = "pass",
            [(int)IdentifierType.K_include] = "include",
            [(int)IdentifierType.K_restrict] = "restrict",
            [(int)IdentifierType.K_sealed] = "sealed",
            [(int)IdentifierType.K_void] = "void",
            [(int)IdentifierType.K_constexpr] = "constexpr",
            [(int)IdentifierType.K_interface] = "interface",
            [(int)IdentifierType.K_signed] = "signed",
            [(int)IdentifierType.K_null] = "null",
            [(int)IdentifierType.K_error] = "error",
            [(int)IdentifierType.K_def] = "def",
            [(int)IdentifierType.K_endforeach] = "endforeach",
            [(int)IdentifierType.K_enum] = "enum",
            [(int)IdentifierType.K_decltype] = "decltype",
            [(int)IdentifierType.K_friend] = "friend",
            [(int)IdentifierType.K_typeid] = "typeid",
            [(int)IdentifierType.K_foreach] = "foreach",
            [(int)IdentifierType.K_nonlocal] = "nonlocal",
            [(int)IdentifierType.K_ushort] = "ushort",
            [(int)IdentifierType.K_empty] = "empty",
            [(int)IdentifierType.K_requires] = "requires",
            [(int)IdentifierType.K_alignof] = "alignof",
            [(int)IdentifierType.K_bool] = "bool",
            [(int)IdentifierType.K_default] = "default",
            [(int)IdentifierType.K_except] = "except",
            [(int)IdentifierType.K_template] = "template",
            [(int)IdentifierType.K_internal] = "internal",
            [(int)IdentifierType.K_float] = "float",
            [(int)IdentifierType.K_alignas] = "alignas",
            [(int)IdentifierType.K_instanceof] = "instanceof",
            [(int)IdentifierType.K_namespace] = "namespace",
            [(int)IdentifierType.K_delete] = "delete",
            [(int)IdentifierType.K_isset] = "isset",
            [(int)IdentifierType.K_extends] = "extends",
            [(int)IdentifierType.K_fixed] = "fixed",
            [(int)IdentifierType.K_include_once] = "include_once",
            [(int)IdentifierType.K_concept] = "concept",
            [(int)IdentifierType.K_None] = "None",
            [(int)IdentifierType.K_and] = "and",
            [(int)IdentifierType.K_var] = "var",
            [(int)IdentifierType.K_delegate] = "delegate",
            [(int)IdentifierType.K_typeof] = "typeof",
            [(int)IdentifierType.K_operator] = "operator",
            [(int)IdentifierType.K_char] = "char",
            [(int)IdentifierType.K_do] = "do",
            [(int)IdentifierType.K_volatile] = "volatile",
            [(int)IdentifierType.K_lock] = "lock",
            [(int)IdentifierType.K_static_cast] = "static_cast",
            [(int)IdentifierType.K_raise] = "raise",
            [(int)IdentifierType.K_insteadof] = "insteadof",
            [(int)IdentifierType.K_override] = "override",
            [(int)IdentifierType.K_mutable] = "mutable",
            [(int)IdentifierType.K_uint] = "uint",
            [(int)IdentifierType.K_require_once] = "require_once",
            [(int)IdentifierType.K_unset] = "unset",
            [(int)IdentifierType.K_base] = "base",
            [(int)IdentifierType.K_object] = "object",
            [(int)IdentifierType.K_super] = "super",
            [(int)IdentifierType.K_break] = "break",
            [(int)IdentifierType.K_print] = "print",
            [(int)IdentifierType.K_transient] = "transient",
            [(int)IdentifierType.K_short] = "short",
            [(int)IdentifierType.K_catch] = "catch",
            [(int)IdentifierType.K_wchar_t] = "wchar_t",
            [(int)IdentifierType.K_boolean] = "boolean",
            [(int)IdentifierType.K_extern] = "extern",
            [(int)IdentifierType.K_lambda] = "lambda",
            [(int)IdentifierType.K_byte] = "byte",
            [(int)IdentifierType.K_static_assert] = "static_assert",
            [(int)IdentifierType.K_long] = "long",
            [(int)IdentifierType.K_double] = "double",
            [(int)IdentifierType.K_out] = "out",
            [(int)IdentifierType.K_decimal] = "decimal",
            [(int)IdentifierType.K_throws] = "throws",
            [(int)IdentifierType.K_for] = "for",
            [(int)IdentifierType.K_case] = "case",
            [(int)IdentifierType.K_continue] = "continue",
            [(int)IdentifierType.K_co_await] = "co_await",
            [(int)IdentifierType.K_async] = "async",
            [(int)IdentifierType.K_class] = "class",
            [(int)IdentifierType.K_require] = "require",
            [(int)IdentifierType.K_assert] = "assert",
            [(int)IdentifierType.K_while] = "while",
            [(int)IdentifierType.K_False] = "False",
            [(int)IdentifierType.K_trait] = "trait",
            [(int)IdentifierType.K_noalias] = "noalias",
            [(int)IdentifierType.K_dynamic_cast] = "dynamic_cast",
            [(int)IdentifierType.K_native] = "native",
            [(int)IdentifierType.K_unchecked] = "unchecked",
            [(int)IdentifierType.K_strictfp] = "strictfp",
            [(int)IdentifierType.K_and_eq] = "and_eq",
            [(int)IdentifierType.K_list] = "list",
        };

        public IdentifierType identifier_type(string s)
        {
            if (km.ContainsKey(s))
            {
                return km[s];
            }

            return IdentifierType.IDENTIFIER;
        }

        public string to_string(int k)
        {
            if (tm.ContainsKey(k))
            {
                return tm[k];
            }

            return "???";
        }
    }
}
